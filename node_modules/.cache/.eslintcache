[{"/home/chingalo/Documents/my-app/src/first-api/src/index.js":"1","/home/chingalo/Documents/my-app/src/first-api/src/App.js":"2","/home/chingalo/Documents/my-app/src/first-api/src/reportWebVitals.js":"3"},{"size":535,"mtime":1661418545437,"results":"4","hashOfConfig":"5"},{"size":3248,"mtime":1661418785133,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1661418545437,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r860e4",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/chingalo/Documents/my-app/src/first-api/src/index.js",[],[],"/home/chingalo/Documents/my-app/src/first-api/src/App.js",["18"],[],"import React, { SyntheticEvent } from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport './App.css';\nimport { json, text } from 'stream/consumers';\nimport { urlToHttpOptions } from 'url';\nimport { title } from 'process';\n\nasync function get() {\n  try {\n    const response =  await fetch('https://jsonplaceholder.typicode.com/todos').then(response => response.json());\n    return response;\n  } catch (e) { }\n\n}\n\n/*async function post(data: any){\nconst body = data;\nconst resposes = await fetch('https://jsonplaceholder.typicode.com/todos?page=1',{\n  body: JSON.stringify({\n    \"userId\": 1,\n    \"title\": \"Create New Post\",\n    \"completed\": true}),\n  method: 'POST'\n})\nreturn resposes.status;\n}*/\n\nfunction Contact() {\n  const [todos, setTodos] = useState<any[]>([]);\n  const [name, setName] = useState<string[]>([]);\n  const [selected, setSelected] = useState<string | undefined>();\n  const [rawInput, setRawInput] = useState(\"\");\n  const [counter, setCounter] = useState(0);\n\n\n  useEffect(() => {\n\n    async function fetch(){\n      const todosFromServer = await get()\n      setTodos(todosFromServer);\n  }\n  fetch()\n    \n  }, []);\n  function increment() {\n    setCounter(counter + 1);\n  }\n  const display = (event: SyntheticEvent) => {\n    event.preventDefault();\n    if (selected) {\n      //find index of selected \n      const index = name.findIndex((n) => n === selected);\n      if (index >= 0) {\n        //replace value within the array\n        setName(prevState => {\n          const updatedList = [...prevState];\n          updatedList[index] = rawInput;\n          return updatedList;\n        })\n      }\n\n    } else {\n      setName(prevState => [...prevState, rawInput])\n    }\n    setRawInput(\"\");\n  }\n\n\n  /*const person = prompt(\" Enter your name\");\n  if (person == null || person == \"\") {\n    let text = \"User cancelled the prompt.\";\n  } else {\n    let text = \"Hello \" + person + \"Welcome to contact manager\";\n  } \n  */\n  return (\n    <form onSubmit={display}>\n      <div className=\"App\">\n        <h2>{counter}</h2>\n        <header className=\"App-header\">\n          <h1>Contact manager</h1>\n          <input type=\"text\" value={rawInput} onChange={(e) => setRawInput(e.target.value)}></input>\n          <button type='submit'>Submit</button>\n          {\n            name !== [] && name.map(item =>\n              <p style={{\n                background: ('background' == item) ? 'green' : 'black',\n                color: \"#FFFFFF\",\n              }} onClick={() => {\n                setSelected(item);\n                setRawInput(item);\n              }}>{item}</p>)\n\n          }\n          {\n            rawInput && (<UnmountOnEmptyRawInput rawInput={rawInput} />)\n          }\n\n          {\n            <ul>\n              <li>{todos.map(r=> <li>{r.title}</li>)}</li>\n              <li>{todos.map(r=> <li>{r.userId}</li>)}</li>\n            </ul>\n          }\n\n        </header>\n\n      </div>\n    </form>\n  )\n}\n\n\nfunction UnmountOnEmptyRawInput({ rawInput }: { rawInput: string }) {\n\n\n\n  useEffect(()=>{\n      console.log(\"Mounting\");\n      return ()=>{\n         console.log(\"This component is now unmounting\");\n         \n      }\n  }, [])\n\n  return (<div>{rawInput}</div>)\n}\n\nexport default Contact;\nexport { Contact };\n","/home/chingalo/Documents/my-app/src/first-api/src/reportWebVitals.js",[],[],{"ruleId":null,"fatal":true,"severity":2,"message":"19","line":30,"column":41},"Parsing error: Unexpected token (30:41)"]